msgid ""
msgstr "Project-Id-Version: Game v4.21.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-08-14\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: Game.Levels.RealAnalysisStory.L03_rw
msgid "The rw tactic"
msgstr ""

#: Game.Levels.RealAnalysisStory.L00_the_problem
msgid "If we know that $x = 5$, then we can prove that $x = 5$."
msgstr ""

#: Game
msgid "# Welcome to Real Analysis, The Game!\n"
"\n"
"This course is currently being developed for Rutgers University Math 311H by [Alex Kontorovich](https://math.rutgers.edu/~alexk). Please email alex.kontorovich@rutgers.edu for suggestions/corrections,\n"
"or better yet, send a PR to https://github.com/AlexKontorovich/RealAnalysisGame.\n"
"\n"
"This course takes you through an Introduction to the Real Numbers, rigorous Œµ-Œ¥ Calculus,\n"
"and basic Point-Set Topology.\n"
"\n"
"To get started, click on\n"
"**\"Level 1: The Story of Real Analysis\"**, and good luck!"
msgstr ""

#: GameServer.RpcHandlers
msgid "intermediate goal solved! üéâ"
msgstr ""

#: Game.Levels.RealAnalysisStory
msgid "Level 1: The Story of Real Analysis"
msgstr ""

#: Game.Levels.RealAnalysisStory.L06_intro
msgid "# Universal statements\n"
"\n"
"In mathematics, we often need to prove statements that are true \"for all\" values of some variable. For example, we might want to prove: \"for all $\\varepsilon > 0$, we have $(\\varepsilon + 1)^2 = (\\varepsilon + 1)^2$.\"\n"
"(Of course the condition that `Œµ` be positive is mathematically superfluous, and is only here for pedagogical purposes.)\n"
"\n"
"If you're thinking that `rfl` will do the trick, that's a good idea, but it won't work, because the goal isn't (yet) an equality. So we need to do something else first.\n"
"\n"
"In Lean, as in mathematics, \"for all\" is written using `‚àÄ`; this is called the universal quantifier, and is gotten by typing \\forall, that is, backslash, then `forall`, then a space. So this goal looks like this:\n"
"`‚àÄ Œµ > 0, (Œµ + 1)^2 = (Œµ + 1)^2`. (Note that to write an epsilon in Lean, you just type \\\\e, that is, backslash, then `e`, then space.)\n"
"\n"
"To prove a \"for all\" statement, you need to show that it's true for an arbitrary element. In English, you would say: give me an arbitrary `Œµ`, and give me the fact that it's positive (we can give that fact a name, like `hŒµ`, since it's a hypothesis about `Œµ`, or perhaps an even more descriptive name like `Œµ_pos`). Note that `Œµ` here is a dummy variable, and we could choose to name it something else on the fly. In English, we might say: give me that `Œµ`, but I want to call it `Alice`; then give me the fact that `Alice` is positive, and my goal will be to prove that `(Alice + 1)^2 = (Alice + 1)^2`. If we were more polite, we might replace \"give me\" above with \"introduce\", like:\n"
"introduce an `Œµ`, and introduce the fact, call it `hŒµ`, that `Œµ` is positive.\n"
"\n"
"In Lean, the syntax for this is the command `intro`, followed by whatever name you want to give a dummy variable or a hypothesis.\n"
"\n"
"So: when you see a goal that starts with `‚àÄ`, you can use `intro` to \"introduce\" the variable. For example:\n"
"- `intro Œµ` introduces the variable Œµ. But look at the goal state now! It changes to: `Œµ > 0 ‚Üí (Œµ + 1)^2 = (Œµ + 1)^2`. So we're not done introducing things.\n"
"- Then `intro hŒµ` introduces the hypothesis that `Œµ > 0` (and again, you can call the hypothesis whatever you want; try `intro Œµ_pos` instead).\n"
"\n"
"After using `intro` twice, the goal will become one that you\n"
"should know how to solve.\n"
"\n"
"If you want to be really slick, you can combine the two `intro` commands into\n"
"one: `intro Œµ hŒµ`. But don't feel obliged."
msgstr ""

#: Game.Levels.RealAnalysisStory.L08_obtain
msgid "The obtain tactic"
msgstr ""

#: Game.Levels.RealAnalysisStory.L09_big_boss
msgid "# The Final Challenge\n"
"\n"
"Congratulations! You've learned many fundamental tactics for mathematical reasoning in Lean:\n"
"- `exact hypothesisName` for when a hypothesis matches the goal exactly\n"
"- `rfl` for reflexivity (proving `X = X`)\n"
"- `rewrite [hypothesisName]` for rewriting using equalities\n"
"- `ring_nf` for algebraic manipulation\n"
"- `use` for providing witnesses to existence statements in goals\n"
"- `intro` for handling universal quantifiers in goals\n"
"- `specialize` for applying universal statements to specific values in hypotheses\n"
"- `obtain ‚ü®value, hypothesisOnValue‚ü© := ExistentialHypothesis ` for extracting information from existence statements in hypotheses\n"
"\n"
"Now it's time for your first **Big Boss** - a problem that requires you to use almost ALL of these tactics in a single proof!\n"
"\n"
"**The Challenge:**\n"
"Given a function `f` and information about its behavior, prove a complex statement that involves existence, universals, algebra, and rewriting.\n"
"\n"
"This is what real mathematical proofs look like - a careful orchestration of multiple reasoning steps. You've got this! Use everything you've learned."
msgstr ""

#: Game.Levels.RealAnalysisStory.L05_use
msgid "The `use` tactic provides a specific value to prove an existence statement."
msgstr ""

#: Game.Levels.RealAnalysisStory.L06_intro
msgid "Excellent! You've learned the `intro` tactic for universal statements.\n"
"\n"
"Notice what happened:\n"
"1. `intro Œµ` introduced the arbitrary real number Œµ\n"
"2. `intro hŒµ` introduced the hypothesis `hŒµ : Œµ > 0`\n"
"3. The goal became `(Œµ + 1)^2 = (Œµ + 1)^2`\n"
"4. `rfl` solve the goal, by the reflexive property of the equals sign.\n"
"\n"
"The `intro` tactic is absolutely crucial in real analysis. You'll use it constantly to:\n"
"- Handle \"for all Œµ > 0\" statements in limit definitions\n"
"- Introduce arbitrary points in domain/range proofs\n"
"- Work with function definitions\n"
"\n"
"This pattern of `intro` followed by algebraic manipulation is everywhere in analysis!"
msgstr ""

#: Game
msgid "Learn real analysis through the historical crises that forced mathematicians to rebuild calculus from the ground up in the 19th century."
msgstr ""

#: Game.Levels.NewtonsCalculationOfPi.L01_the_problem
msgid "Newton's plan:\n"
"\n"
"1. Find a curve whose area under it equals œÄ/6\n"
"2. Expand that curve as an infinite series\n"
"3. Integrate the series term by term\n"
"4. Compute œÄ from the resulting infinite sum\n"
"\n"
"Sounds impossible? Let's see how Newton pulled it off...\n"
"\n"
"**Next:** The geometric setup that makes it all work."
msgstr ""

#: Game.Levels.RealAnalysisStory.L04_ring_nf
msgid "Excellent! You've learned the `ring_nf` tactic.\n"
"\n"
"This tactic is incredibly powerful for algebraic manipulations. It automatically handles all the tedious algebra that would take many steps to do by hand.\n"
"\n"
"Your toolkit now includes:\n"
"- `exact hypothesis_name` for when a hypothesis exactly matches your goal\n"
"- `rfl` for proving something equals itself\n"
"- `rewrite [hypothesis_name]` for rewriting using equalities\n"
"- `ring_nf` for algebraic simplifications and expansions\n"
"\n"
"As we move into real analysis proper, you'll find that `ring_nf` is invaluable for dealing with polynomial expressions, which appear everywhere in calculus!"
msgstr ""

#: Game.Levels.RealAnalysisStory.L09_big_boss
msgid "Big Boss: The Ultimate Tactic Challenge"
msgstr ""

#: Game.Levels.RealAnalysisStory.L02_rfl
msgid "Excellent! You've learned the `rfl` tactic.\n"
"\n"
"The key difference:\n"
"- Use `exact hypothesis_name` when you have a hypothesis that matches your goal exactly\n"
"- Use `rfl` when you need to prove that something equals itself\n"
"\n"
"These are two of the most fundamental tactics in Lean. As we progress through real analysis, you'll see that many complex proofs ultimately come down to showing that two expressions are identical."
msgstr ""

#: Game.Levels.RealAnalysisStory.L05_use
msgid "# Proving existence\n"
"\n"
"Sometimes in mathematics, you need to prove that something exists. For example, you might need to prove \"there exists a real number $c$ such that $(x+y)^4 = x^4 + 4x^3y + cx^2y^2 + 4xy^3 + y^4$.\"\n"
"\n"
"This is called an *existence statement*. In Lean, as in mathematics,\n"
"existence is written using `‚àÉ` (\"there exists\").\n"
"It is called the *existential quantifier*, and is written in Lean by typing \\exists, that is, a backslash, then the word `exists`, and then a space.\n"
"So this goal would look like:\n"
"`‚àÉ (c : ‚Ñù), (x + y)^4 = x^4 + 4*x^3*y + c*x^2*y^2 + 4*x*y^3 + y^4`\n"
"\n"
"To prove an existence statement, you need to provide a specific value that works. This is where the `use` tactic comes in.\n"
"\n"
"If you think you know what value of `c` would work, you can write `use 42` (or with `42` replaced by whatever number you think is right). Lean will then substitute that value and ask you to prove that the resulting equation is true.\n"
"\n"
"Try writing `use someNumber`. Do you see what to do after that?"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed with warnings‚Ä¶ üé≠"
msgstr ""

#: Game.Levels.RealAnalysisStory.L02_rfl
msgid "The `rfl` tactic proves goals of the form `A = A` where both sides are *identical*."
msgstr ""

#: Game.Levels.RealAnalysisStory.L04_ring_nf
msgid "The binomial expansion: $(x + y)^3 = x^3 + 3x^2y + 3xy^2 + y^3$."
msgstr ""

#: Game.Levels.RealAnalysisStory.L06_intro
msgid "The intro tactic"
msgstr ""

#: Game.Levels.RealAnalysisStory.L00_the_problem
msgid "The `exact` tactic solves a goal when one of the hypotheses is *exactly* the same as the goal. The syntax is `exact hypothesis_name`"
msgstr ""

#: Game.Levels.RealAnalysisStory.L02_rfl
msgid "The rfl tactic"
msgstr ""

#: Game.Levels.RealAnalysisStory.L09_big_boss
msgid "# üéâ VICTORY! üéâ\n"
"\n"
"**Incredible!** You've defeated the Big Boss and mastered all the fundamental tactics of mathematical reasoning!\n"
"\n"
"**Let's see what you just accomplished:**\n"
"\n"
"1. **`obtain ‚ü®a, ha‚ü© := h_existential`** - Extracted the witness `a` and fact that `f (a) = 3` from the hypothesis\n"
"2. **`use a`** - Chose `a` as your witness for the existence statement in the goal\n"
"3. **`intro y` and `intro hy`** - Handled the universal quantifier \"for all y > 0\" in the goal\n"
"4. **`specialize h_universal y hy`** - Applied the universal property to your specific value in the hypothesis\n"
"5. **`rewrite [h_universal]`** - Used the specialized fact to rewrite the goal\n"
"6. **`rewrite [ha]`** - Used the original fact that `f (a) = 3` to also rewrite the goal\n"
"7. **`ring_nf`** - Verified finally that `(f y + 9) ^ 2 = (f y + 3 ^ 2) ^ 2`\n"
"\n"
"You've just completed a genuinely sophisticated mathematical argument! This kind of multi-step reasoning, combining existence statements, universal properties, and algebraic manipulation, is exactly what you'll encounter throughout real analysis.\n"
"\n"
"**You are now ready to begin your journey to rigorous calculus!**\n"
"\n"
"Welcome to the Introduction to Formal Real Analysis. üéì"
msgstr ""

#: Game.Levels.RealAnalysisStory.L06_intro
msgid "The `intro` tactic introduces variables and hypotheses from ‚àÄ statements or implications."
msgstr ""

#: Game.Levels.RealAnalysisStory.L07_specialize
msgid "Great! You've learned the `specialize` tactic.\n"
"\n"
"Notice what happened:\n"
"1. Initially, `hf : ‚àÄ x, f (x) = x^2` was a universal statement\n"
"2. `specialize hf t` transformed it into `hf : f (t) = t^2`\n"
"3. Now `exact hf` worked because the hypothesis exactly matched the goal\n"
"\n"
"The pattern is:\n"
"- `intro` when you have `‚àÄ` in the goal (\"introduce an arbitrary term...\")\n"
"- `specialize` when you have `‚àÄ` in a hypothesis (\"apply the hypothesis to specific value...\")\n"
"\n"
"This is fundamental in real analysis when working with:\n"
"- Function properties that hold \"for all x\"\n"
"- Limit definitions involving \"for all Œµ > 0\"\n"
"- Continuity statements\n"
"\n"
"Last lesson in Level 1 coming up."
msgstr ""

#: Game.Levels.RealAnalysisStory.L08_obtain
msgid "The `obtain` tactic extracts a witness from an existence statement in a hypothesis."
msgstr ""

#: Game.Levels.NewtonsCalculationOfPi
msgid "Newton's œÄ Computation"
msgstr ""

#: Game
msgid "*An Introduction to Formal Real Analysis - Interactive Edition*\n"
"\n"
"## About this Course\n"
"\n"
"This course follows the historical crises that forced mathematicians to rebuild\n"
"mathematics from the ground up in the 19th century. You'll learn why concepts\n"
"like Œµ-Œ¥ definitions became necessary and how to use them to do advanced calculus.\n"
"\n"
"## Credits\n"
"\n"
"* **Course Design:** By Alex Kontorovich alex.kontorovich@rutgers.edu\n"
"* **Interactive Implementation:** Lean 4 Game Engine\n"
"* **Mathematical Content:** Following Rudin, Stein-Shakarchi, etc."
msgstr ""

#: Game.Levels.RealAnalysisStory.L00_the_problem
msgid "Perfect! You've completed your first Lean proof involving real numbers.\n"
"\n"
"Remember: the `exact` tactic is used when you have exactly what you need to prove the goal. Look at the top right: your list of tactics now includes `exact`, and if you forget how it works or what it does, just click on it for a reminder."
msgstr ""

#: Game.Levels.RealAnalysisStory.L03_rw
msgid "# Rewriting with equalities\n"
"\n"
"Now let's learn about rewriting. Suppose you have a hypothesis called `Bob : x = 2`, and your goal is to prove that `x + y = 2 + y`.\n"
"\n"
"Can you use `rfl`? No, because the two sides of the goal (`x + y` and `2 + y`) are not *identically* the same.\n"
"\n"
"Can you use `exact Bob`? No, because `Bob` says `x = 2`, which is not *exactly* what the goal is asking for.\n"
"\n"
"But you can use the hypothesis `Bob` to *rewrite* the goal. Since `Bob` tells us that `x = 2`, we can replace `x` with `2` in our goal.\n"
"\n"
"In Lean, if you have a hypothesis which is an equality, and you want to replace the *left hand side* of that equality with the *right hand side* in your goal, you use the `rewrite` (rewrite) tactic.\n"
"\n"
"The syntax is: `rewrite [hypothesis_name]`\n"
"\n"
"Unfortunately, those square brackets are part of the Lean syntax, and there's nothing you or I can do about them right now. Just remember: `rewrite [Bob]` means \"use the equality in `Bob` to rewrite the goal.\"\n"
"\n"
"After you rewrite, you're not done. But you should know how to finish from there.\n"
"\n"
"Try it out!"
msgstr ""

#: Game.Levels.NewtonsCalculationOfPi.L01_the_problem
msgid "Newton's Problem: Computing œÄ"
msgstr ""

#: GameServer.RpcHandlers
msgid "level completed! üéâ"
msgstr ""

#: Game.Levels.RealAnalysisStory.L04_ring_nf
msgid "# Algebraic manipulations\n"
"\n"
"Now let's learn about algebraic simplification. Suppose you need to prove that $(x + y)^3 = x^3 + 3x^2y + 3xy^2 + y^3$.\n"
"\n"
"This is true by the basic laws of algebra - expanding the left side using the distributive law, commutativity, associativity, etc. But doing this by hand would be extremely tedious.\n"
"\n"
"Fortunately, Lean has a powerful tactic called `ring_nf` (\"ring normal form\") that can automatically perform algebraic manipulations like:\n"
"- Expanding products\n"
"- Collecting like terms\n"
"- Rearranging using commutativity and associativity\n"
"- Applying the distributive law\n"
"\n"
"When you have an algebraic identity involving addition, subtraction, and multiplication, `ring_nf` can often prove it automatically.\n"
"\n"
"Try it out on this classic binomial expansion!"
msgstr ""

#: Game.Levels.RealAnalysisStory.L09_big_boss
msgid "**BIG BOSS LEVEL**: This problem requires all the tactics you've learned!"
msgstr ""

#: Game.Levels.RealAnalysisStory.L07_specialize
msgid "The `specialize` tactic applies a universal statement in a hypothesis to a specific value."
msgstr ""

#: Game.Levels.RealAnalysisStory.L06_intro
msgid "For all positive real numbers, this algebraic identity holds."
msgstr ""

#: Game.Levels.RealAnalysisStory.L07_specialize
msgid "If a function of `x` always equals `x¬≤`, then it equals `t¬≤` when evaluated at `t`."
msgstr ""

#: Game.Levels.RealAnalysisStory.L02_rfl
msgid "Every mathematical expression equals itself."
msgstr ""

#: Game.Levels.RealAnalysisStory.L08_obtain
msgid "Excellent! You've learned the `obtain` tactic for working with existence in hypotheses.\n"
"\n"
"Notice the complete pattern:\n"
"1. `obtain ‚ü®c, hc‚ü© := h` unpacked the hypothesis into a specific value `c` and proof `hc : f c = 2`\n"
"2. `use c` provided this same value as our witness for the goal\n"
"3. `rewrite [hc]` rewrote `f c` as `2` in the goal, changing it to `2^2 = 4`\n"
"4. `ring_nf` verified that `2 ^ 2 = 4`\n"
"\n"
"The symmetry is beautiful:\n"
"- `use` when you have `‚àÉ` in the goal (\"here's my specific example\")\n"
"- `obtain` when you have `‚àÉ` in a hypothesis (\"let me unpack this existence claim\")\n"
"\n"
"This completes your basic logical toolkit! In real analysis, you'll use `obtain` constantly when working with:\n"
"- Limit definitions (\"given Œµ > 0, there exists Œ¥ > 0...\")\n"
"- Intermediate Value Theorem (\"there exists c such that f(c) = 0\")\n"
"- Existence theorems throughout analysis\n"
"\n"
"You're now ready to tackle real mathematical proofs!"
msgstr ""

#: Game.Levels.RealAnalysisStory.L08_obtain
msgid "If there exists a point where f equals 2, then there exists a point where f¬≤ equals 4."
msgstr ""

#: Game.Levels.RealAnalysisStory.L04_ring_nf
msgid "The `ring_nf` tactic puts both sides of an equation into a standard algebraic form and checks if they're equal."
msgstr ""

#: Game.Levels.RealAnalysisStory.L08_obtain
msgid "# Extracting information from existence statements\n"
"\n"
"Now let's learn the counterpart to `use`. You know that if you have `‚àÉ` in the goal, you write `use` to provide a specific value.\n"
"\n"
"But suppose you have a *hypothesis* that says \"there exists a real number `c` such that `f(c) = 2`\". In Lean, this looks like:\n"
"`h : ‚àÉ (c : ‚Ñù), f c = 2`\n"
"\n"
"And say you want to prove that \"there exists a real number `c` such that `(f c)^2 = 4`\".\n"
"\n"
"Again, you can't just say `exact h` because these are different statements. But you can use the information from the hypothesis to construct your proof. The name of this command is `obtain`.\n"
"\n"
"The syntax for `obtain` is the weirdest yet: write\n"
"\n"
"`obtain ‚ü®c, hc‚ü© := h`.\n"
"\n"
"The reason for the angle brackets is that `h` is actually a bundle of two things, first a particular value for `c`, and second is the fact, which we're calling `hc`, that `f c = 2`. And don't forget the colon-equals! You're obtaining `c` and `hc` *from* `h`.\n"
"\n"
"The angle brackets `‚ü® ‚ü©` are typed in Lean via `\\<` (backslash, less than sign, space) and `\\>`.\n"
"\n"
"Then you'll have a value for `c`, and the hypothesis `hc : f c = 2`. You should be able to figure out how to solve the goal from here."
msgstr ""

#: Game.Levels.RealAnalysisStory.L02_rfl
msgid "# When things are identical to themselves\n"
"\n"
"Sometimes in mathematics, we need to prove that something equals itself. For example, we might need to prove that $x^2 + 2y = x^2 + 2y$.\n"
"\n"
"This isn't quite the same as our previous exercise. There, we had a hypothesis `h` that told us `x = 5`, and we used `exact h` to prove the goal `x = 5`.\n"
"\n"
"But now we don't have any hypothesis that says `x^2 + 2y = x^2 + 2y`. We're just being asked to prove that some expression equals itself. We can't say `exact something` because there's no `something`.\n"
"\n"
"Instead, we will use what mathematicians call the *reflexive property* of equality: everything is equal to itself. In Lean, if you get to a situation where you're trying to prove an equality, and the two things on both sides are *identical*, then the syntax is to give the command `rfl` (short for \"reflexivity\").\n"
"\n"
"Try it out!"
msgstr ""

#: Game.Levels.RealAnalysisStory.L00_the_problem
msgid "# Theorem Prover Software\n"
"\n"
"In this course, we will be using a \"proof assistant\" called Lean. This is software that checks that our proofs prove *exactly* what we\n"
"claim they prove. It has other really cool pedagogical features that we'll get to later.\n"
"It will take a little while to get used to the syntax, so until we're comfortable, we'll intersperse exercises teaching Lean with exercises teaching Real Analysis. Pretty soon all the exercises will just be about Real Analysis.\n"
"\n"
"\n"
"For this first exercise, we have a hypothesis that we called `h` (but we could've called it anything, like `x_eq_5`, or `Alice`) that says a real number `x` equals 5. Our goal is to prove that `x` equals 5.\n"
"This shouldn't be very hard, but if you don't know\n"
"the command, you'll be out of luck. Our goal is to\n"
"prove *exactly* the same statement as one of the hypotheses.\n"
"To solve that goal, the syntax is to write `exact`, then a space, and then the name of the hypothesis which exactly matches the goal."
msgstr ""

#: Game.Levels.RealAnalysisStory.L04_ring_nf
msgid "The ring_nf tactic"
msgstr ""

#: Game.Levels.RealAnalysisStory.L03_rw
msgid "If we know that $x = 2$, then we can prove that $x + y = 2 + y$."
msgstr ""

#: Game
msgid "An Introduction to Formal Real Analysis"
msgstr ""

#: Game.Levels.NewtonsCalculationOfPi.L01_the_problem
msgid "# Cambridge, 1666: The Plague Year\n"
"\n"
"Isaac Newton, age 23, is home from  Cambridge, quarantining to escape an outbreak of the Plague, when he decides to invent calculus. (And what did you manage to accomplish during your COVID quarantine?..) In his mother's farmhouse\n"
"in Woolsthorpe, he's about to revolutionize mathematics.\n"
"\n"
"Newton starts to mess around with the Binomial Theorem. He knows Pascal's triangle,\n"
"like everybody else, but decides to do something crazy with it."
msgstr ""

#: Game.Levels.RealAnalysisStory.L07_specialize
msgid "# Using universal statements\n"
"\n"
"Now let's learn the flip side of `intro`. You have already learned that:\n"
"- if you have `‚àÉ` in the goal, you write `use` to provide a specific value. And\n"
"- if you have `‚àÄ` in the goal, you write `intro` to introduce an arbitrary variable\n"
"\n"
"But what if you have `‚àÄ` in a *hypothesis* and you want to use it for a particular value?\n"
"\n"
"Suppose you have:\n"
"- A positive real number `t`, that is a real number `t`, together with a hypothesis, say, `t_pos` that `t > 0`\n"
"- A function `f : ‚Ñù ‚Üí ‚Ñù`\n"
"- A hypothesis `hf : ‚àÄ x > 0, f (x) = x^2`, meaning \"for all x positive, f (x) equals x¬≤\". (Note that you *have* to put a space after `f` before `(x)` or else Lean will be very angry with you! In fact, Lean will often drop unnecessary parentheses, so you'll see `f x` instead of `f (x)` -- and again, definitely *not* `f(x)`.)\n"
"- And you want to prove the goal `f (t) = t^2`.\n"
"\n"
"Can you use `exact hf`? No! The hypothesis `hf` says \"for all positive x, f (x) = x¬≤\" but the goal asks specifically about `f (t) = t¬≤`. They're not *exactly* the same.\n"
"\n"
"This is where `specialize` comes in. You can write `specialize hf t` to specialize the statement `hf` to the particular value `t`. This transforms `hf` from \"‚àÄ x > 0, f (x) = x¬≤\" into \"t > 0 ‚Üí f (t) = t¬≤\". Just like we had to `intro` multiple times (once for the dummy variable name, and again to name the hypothesis), we can specialize multiple times; so you can now write `specialize hf t_pos`. Or you can kill two birds with one swoop via: `specialize hf t t_pos`.\n"
"\n"
"I'm sure you can solve the goal from there yourself!"
msgstr ""

#: Game.Levels.RealAnalysisStory.L05_use
msgid "There exists a real number that makes this binomial expansion work."
msgstr ""

#: Game.Levels.RealAnalysisStory.L05_use
msgid "The use tactic"
msgstr ""

#: Game.Levels.RealAnalysisStory.L05_use
msgid "Perfect! You've learned the `use` tactic for existence proofs.\n"
"\n"
"Notice what happened:\n"
"1. `use 6` told Lean that $c = 6$ is our proposed value\n"
"2. The goal changed to proving $(x + y)^4 = x^4 + 4x^3y + 6x^2y^2 + 4xy^3 + y^4$\n"
"3. `ring_nf` verified that this algebraic identity is correct\n"
"\n"
"The `use` tactic is fundamental in real analysis. You'll use it to:\n"
"- Find specific values of $\\varepsilon$ and $\\delta$ in limit proofs\n"
"- Construct witnesses for existence theorems\n"
"- Provide counterexamples\n"
"\n"
"Your growing toolkit:\n"
"- `exact`, `rfl`, `rewrite` for basic equality reasoning\n"
"- `ring_nf` for algebraic manipulation\n"
"- `use` for existence proofs"
msgstr ""

#: Game.Levels.NewtonsCalculationOfPi.L01_the_problem
msgid "This level has no proof - it's pure exposition."
msgstr ""

#: Game.Levels.RealAnalysisStory.L03_rw
msgid "Great! You've learned the `rewrite` tactic.\n"
"\n"
"Notice what happened: after you typed `rewrite [Bob]`, the goal changed from `x + y = 2 + y` to `2 + y = 2 + y`. Then you needed to type `rfl` to finish the proof, since both sides were now identical.\n"
"\n"
"So far you've learned:\n"
"- `exact hypothesis_name` when a hypothesis exactly matches your goal\n"
"- `rfl` when you need to prove something equals itself\n"
"- `rewrite [hypothesis_name]` when you want to use an equality to rewrite your goal\n"
"\n"
"The `rewrite` tactic is incredibly powerful and you'll use it constantly in real analysis!"
msgstr ""

#: Game.Levels.RealAnalysisStory.L03_rw
msgid "The `rewrite` tactic replaces the left-hand side of an equality with the right-hand side in the goal. The syntax is `rewrite [hypothesis_name1, hypothesis_name2, etc]`."
msgstr ""

#: Game.Levels.NewtonsCalculationOfPi
msgid "# The Mathematical Revolution of 1666\n"
"\n"
"Now that you've mastered the basic tactics of mathematical reasoning, let's dive into the story that will motivate everything we do in real analysis.\n"
"\n"
"This world tells the tale of Newton's amazing œÄ computation - how a 23-year-old genius transformed a geometric constant into an infinite series. But more importantly, we'll see how this brilliant calculation exposed the shaky foundations of mathematics.\n"
"\n"
"Newton's method worked, but we did not have the tools to rigorously prove *why*, until the late 19th century.\n"
"\n"
"**You'll learn:**\n"
"- How Newton actually computed œÄ using infinite series\n"
"- Why his method was both brilliant and problematic\n"
"- How this connects to the foundational issues we'll resolve later\n"
"\n"
"This is the story behind the story - the mathematical revolution that made real analysis necessary."
msgstr ""

#: Game.Levels.RealAnalysisStory
msgid "# A First Course in Real Analysis\n"
"\n"
"You may want to pull the left-most slider all the way to the right; what follows is a discussion\n"
"between \"Socrates\" and \"Simplicio,\" which hopefully  explains what it is we're trying to do here.\n"
"\n"
"Simplicio: What is \"Real Analysis\"?\n"
"\n"
"Socrates: Oh, it's just Calculus, but done \"right\".\n"
"\n"
"Simplicio: Huh? Why does Calculus need a new name? What's wrong with it?\n"
"\n"
"Socrates: Well, nothing really. Quick: what's a derivative?\n"
"\n"
"Simplicio: Easy! If I have a function $f : \\R \\to \\R$ and it's differentiable at $x$, then the\n"
"derivative is $f'(x) := \\lim_{h \\to 0}\\frac{f(x+h) - f(x)}{h}$. This represents the \"instantaneous\" slope\n"
"of the graph of the function $y=f(x)$ at the point $(x, f(x))$.\n"
"\n"
"<img src=\"https://raw.githubusercontent.com/AlexKontorovich/RealAnalysisGame/main/RealAnalysisGame/images/Deriv.png\"/>\n"
"\n"
"Socrates: Very good! And tell me please, what is an integral?\n"
"\n"
"Simplicio: That's easy, too! If you want to integrate our function $f$ along an\n"
"interval, $[a, b]$, say, you pretend that you have infinitely many, infinitely small rectangles, work out their\n"
"areas as base times height, and add them up:\n"
"$\\int_a^b f(x)dx := \\lim_{N\\to\\infty} \\sum_{j=1}^N \\frac{b-a}{N} f\\left(a + j\\frac{b-a}{N}\\right)$\n"
"\n"
"\n"
"Socrates: Great. And what are the two Fundamental Theorems of Calculus?\n"
"\n"
"Simplicio: These too are easy! The first one says that if you make a new function by integrating $f$\n"
"up to a variable amount, $x$, that is, let\n"
" $F(x) := \\int_a^x f(t)dt$, then the derivative of the new function is just $F'(x) = f(x)$.\n"
"\n"
"Socrates: And the second?\n"
"\n"
"Simplicio:\n"
"The second one says that, conversely, if $F$ is an antiderivative of $f$, that is, $F'(x)=f(x)$, then\n"
"it's easy to work out the area under the curve, because\n"
" $\\int_a^b f(x)dx = F(b) - F(a)$.\n"
"So differentiation and integration are inverse operations!\n"
"\n"
"Socrates: Perfect. Now, here's the problem. You used words like \"limit\", \"infinitely many\", \"infinitely small\", and so on. What do they *actually* mean?\n"
"\n"
"Simplicio: Oh, you know, it's when something  happens \"eventually\". You just have to get used to\n"
"the feel of it.\n"
"\n"
"Socrates: Hmm yes, I see. I agree that that's an OK way to think of it, for a while at least, and one that suited Newton (who\n"
"was quite uncomfortable with such words), and Leibniz (who was more care-free here), the two 17th century inventors of\n"
"calculus (if you don't count people like the ancient Greeks Eudoxus and Archimedes, or the 14th century Indian Madhava... but this isn't a history lesson). Leibniz taught the Bernoulli\n"
"brothers (the world's \"first AP Calc students\"!), who taught, among others, the Marquis de l'Hopital, and the great Leonhard Euler (the first \"Calc native\"), who taught the rest of us. All was going quite well... and then came the 19th Century.\n"
"\n"
"Simplicio: Huh? What happened in the 19th Century?\n"
"\n"
"Socrates: Well you see, a guy named Augustin-Louis Cauchy came along (roughly in the 1810s), and started making a fuss that we weren't really doing things perfectly \"rigorously\".\n"
"He set out to reprove the theorems of calculus using precise definitions rather than hand-waving.\n"
"He was making great progress, including proving statements like: the limit of continuous functions is continuous.\n"
"\n"
"Simplicio: Sure, that sounds perfectly reasonable. A limit is a continuous process, so you do that to\n"
"continuous functions, and of course in the end you should get something continuous, too. No?\n"
"\n"
"\n"
"Socrates: Well, the problem is that around the same time, a guy named Joseph Fourier was going around claiming\n"
" that he could add up a bunch of sines and cosines, and get basically any function he wants, including, say, the discontinuous sawtooth!\n"
"\n"
"Simplicio: What?!\n"
"\n"
"Socrates: Look for yourself: Here's a graph of $\\sum_{n=1}^{100}\\frac1n \\sin(nx)$. As you take 100\n"
"out to infinity, Fourier claims that this will get\n"
"closer and closer to a sawtooth function!\n"
"\n"
"Simplicio: Whoa. Wait, I can think of an even easier example: just look at the simplest family of\n"
"polynomials, $f_n(x) = x^n$, on the unit interval $[0,1]$. When you take high powers of any point\n"
"strictly less than $1$, that goes to $0$ in the limit, but powers of $1$ itself always stay at $1$.\n"
"So the limiting function is discontinuous, too! What the heck is going on here?\n"
"\n"
"Socrates: Very good, Simplicio! Exactly right, between Fourier and Cauchy, they \"broke math\".\n"
" You break it, you buy it!\n"
"\n"
"Simplicio: Ok, so what's the right answer, how *do* you do calculus rigorously?\n"
"\n"
"Socrates: Not so fast! Things got even worse, and by the mid-19th century, people realized that\n"
"we don't even know what the real numbers *are*!\n"
"\n"
"Simplicio: What? What do you mean, what are they? Here they are right here: There's zero, and one, and $-2$, and $\\frac35$, and\n"
"$\\sqrt 2$, and $e$ and $\\pi$. What's the problem?\n"
"\n"
"Socrates: Well, do you remember that you need something called the Intermediate Value Theorem\n"
"in calculus?\n"
"\n"
"Simplicio: Sure, if you have a continuous function, and it goes from being negative to being positive,\n"
"then it has to cross zero at some point in between.\n"
"\n"
"Socrates: Very good. Tell me about the function $f : x \\mapsto x^2 - 2$. (We say: \"$f$ maps\n"
"$x$ to $x^2-2$\". Note that we write $f : \\R \\to \\R$ to mean that $f$ takes real numbers to real numbers, but\n"
"replace $\\to$ with $\\mapsto$ (see the tail on the second arrow?) when we want to say what happens to a particular input $x$ under the action of\n"
"$f$. Let me remind you that $x$ here is a dummy variable, so it's the same function if we'd said $f : u \\mapsto u ^ 2 - 2$.) In particular, what happens to $f$ on the rational numbers?\n"
"\n"
"Simplicio: Ok, well if $x$ is a rational number, then so is $x^2$, and hence so is $x^2-2$.\n"
"So actually, we could say that $f : \\mathbb Q \\to \\mathbb Q$, that is, $f$ maps rational numbers to rational numbers.\n"
"Over the reals, the graph of $y=f(x)$ is a simple parabola.\n"
"But you'd asked me about the Intermediate Value Theorem. Hmm. When $x=0$, I know that $f(x)$ will\n"
"be $f(0)=0^2-2=-2$ which is negative. And when $x=2$, $f(2)=2^2-2=2$ which is positive.\n"
"\n"
"Socrates: Go on...\n"
"\n"
"Simplicio: So there's a root of $f$ somewhere between $0$ and $2$. But the place where $f$ crosses the $x$-axis is at $x=\\sqrt2\\approx 1.41\\dots$.\n"
"\n"
"Socrates: And what did the Pythagoreans know about this number?\n"
"\n"
"Simplicio: Supposedly one of them, Hippasus, figured out that $\\sqrt2$ is irrational, which ruined\n"
"their entire theory of geometry and form (they originally believed that *all* numbers were rational); legend has it\n"
"that Hippasus was drowned at sea for his herecy.\n"
"\n"
"Socrates: So...\n"
"\n"
"Simplicio: So wait, if we just restrict to rational inputs, then this parabola is negative, and then\n"
"it's positive, and it *never* crosses zero?! But there's tons of rational numbers almost everywhere you look. So what makes the real numbers different from the\n"
"rational numbers, so that the Intermediate Value Theorem actually holds?\n"
"\n"
"Socrates: Ah! Now, my friend, we are ready to begin."
msgstr ""

#: Game.Levels.RealAnalysisStory.L00_the_problem
msgid "Introduction to Lean"
msgstr ""

#: Game.Levels.RealAnalysisStory.L07_specialize
msgid "The specialize tactic"
msgstr ""

#: Game
msgid "A First Course in Real Analysis"
msgstr ""
